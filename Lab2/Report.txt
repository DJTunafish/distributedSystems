----------------------------------------------------------
Task 1: Election description & cost analysis
----------------------------------------------------------

We implemented the election algorithm fairly close to the suggestions given
in the PM. On startup, each server generates a random rank for itself and begins
its own election by sending an election message to its logical neighbor.
An election message contains three values: the id of the vessel that initiated it
,the id of the vessel who is currently "winning" the election and the rank
of the current winner.
These election messages will then travel around the logical ring from vessel to
vessel, until they come back around to the vessel that initiated them.

When a vessel receives an election message, it first checks if this message
was originally created by it. If so, it checks if it won the election. If not,
it waits for a coordination message from the leader. If the vessel did win the
election, it sends a coordination message to its neighbor, which will travel around
the ring to ensure that all vessels agree on who the leader is. Once this coordination
message has gone around the ring, the vessel assumes leadership of the system.

If a vessel receives an election message which it did not originally create,
it compares its own rank to the rank of the current winner of the election. If
the vessels rank is lower, it sends the message on to its neighbor without
changing any values. If the vessels rank is greater than the current winner,
the vessel sets itself as the current winner of the election and then sends the
message to the next neighbor. In case of the ranks being tied, the id of each
vessel is used as a tie-breaker.

The cost of the election algorithm is n^2 + n, where n is the number of vessels
in the system. n^2 comes from the initial election, where each node sends a
message which must travel around the logical ring once. As such, each election
started by each vessel requires n messages as each message must reach each vessel.
As every vessel starts such an election, the cost of this part of the algorithm is
n^2.
The second part of the algorithm is the coordination message. Here, only the
leader sends a message around the ring in order to confirm to all vessels that it
is indeed the leader. As this message is sent to every vessel once, it incurs
a cost of n.

----------------------------------------------------------
Task 2: Cost of posts, pros + cons of centralized design
----------------------------------------------------------

The cost of posting a new entry is n + 1 in the worst case.
A client first posts a message to an arbitrary server(assumed to not be the leader).
This server then sends a message to the leader, including all information in
the original request from the client. The client then sends n-1 messages, propagating
the request out to all nodes besides itself. Including the initial two messages,
this makes for a total cost of n + 1.

The obvious positive of this design is that we can be very confident in the
consistency of the system. Soon after a new entry has been registered by the
leader vessel, it will be propagated out to all other vessels. As the leader
is the only one to assign keys to and thus order all entries, we can be certain
that all entries will have the same order, as soon as they have been propagated
out properly.

The downside is that all traffic must go through the leader before having any
effect. This puts a lot of strain on the server and may cause severe slowdowns
if we have many simultaneous users, potentially causing a very slow response
time or even timeouts for some users.   
